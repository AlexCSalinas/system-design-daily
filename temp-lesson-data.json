{"lesson":{"day":11,"topic":"Rate Limiting","title":"Protecting Systems from Overload","summary":"Rate limiting controls the number of requests a client can make to prevent system overload and ensure fair resource usage.","key_concepts":["Token Bucket","Leaky Bucket","Fixed Window","Sliding Window"],"real_world_example":"Twitter's API rate limiting prevents abuse while allowing legitimate developers to build applications on their platform","mermaid_diagram":"graph TD\n    Request --> RateLimit{Rate Limiter}\n    RateLimit -->|Allowed| Process[Process Request]\n    RateLimit -->|Denied| Error[Return 429 Error]\n    Process --> Response[Send Response]","discussion_questions":["How would you implement distributed rate limiting across multiple servers?","What factors determine appropriate rate limits for different API endpoints?"],"quiz":[{"question":"Which rate limiting algorithm allows bursts of traffic up to a certain capacity?","options":["Fixed window","Sliding window","Token bucket","Leaky bucket"],"correct":2}]},"date":"2025-10-18","lessonIndex":10}