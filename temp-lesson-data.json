{"lesson":{"day":19,"topic":"Distributed Consensus","title":"Agreement in Distributed Systems","summary":"Distributed consensus algorithms enable multiple nodes to agree on a single value or state despite failures and network issues.","key_concepts":["Raft Algorithm","Paxos","Leader Election","Log Replication"],"real_world_example":"etcd uses Raft consensus to maintain consistent configuration data for Kubernetes clusters across multiple servers","mermaid_diagram":"graph TD\n    Leader[Leader Node] --> Follower1[Follower 1]\n    Leader --> Follower2[Follower 2]\n    Leader --> Follower3[Follower 3]\n    Client --> Leader\n    Leader --> Log[Replicated Log]\n    Follower1 --> Log1[Local Log]\n    Follower2 --> Log2[Local Log]","discussion_questions":["How does the Raft algorithm handle network partitions?","When would you choose Paxos over Raft for consensus?"],"quiz":[{"question":"In the Raft algorithm, how many nodes must agree for a successful commit?","options":["All nodes","Majority of nodes","At least 2 nodes","Leader node only"],"correct":1}]},"date":"2025-10-26","lessonIndex":18}